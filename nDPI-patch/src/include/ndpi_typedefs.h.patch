--- /home/chrisn/src/5/ndpi-netfilter/nDPI//src/include/ndpi_typedefs.h	2021-07-19 20:05:38.536140477 +0000
+++ /home/chrisn/src/5/ndpi-netfilter/nDPI-patch//src/include/ndpi_typedefs.h	2021-07-20 14:10:08.038873935 +0000
@@ -27,6 +27,10 @@
 #include "ndpi_define.h"
 #include "ndpi_protocol_ids.h"
 
+#ifdef __KERNEL__
+#include <linux/version.h>
+#endif
+
 /* NDPI_LOG_LEVEL */
 typedef enum {
 	      NDPI_LOG_ERROR,
@@ -431,17 +435,21 @@
 /* ************************************************************ */
 
 /* NDPI_PROTOCOL_BITTORRENT */
-typedef struct spinlock {
+typedef struct ndpispinlock {
   volatile int    val;
-} spinlock_t;
+} ndpispinlock_t;
 
-typedef struct atomic {
+typedef struct ndpiatomic {
   volatile int counter;
-} atomic_t;
+} ndpiatomic_t;
 
 struct hash_ip4p_node {
   struct hash_ip4p_node   *next,*prev;
+#if !defined(__KERNEL__) || LINUX_VERSION_CODE < KERNEL_VERSION(5, 6, 0)
   time_t                  lchg;
+#else
+  time64_t                lchg;
+#endif
   u_int16_t               port,count:12,flag:4;
   u_int32_t               ip;
   // + 12 bytes for ipv6
@@ -449,15 +457,15 @@
 
 struct hash_ip4p {
   struct hash_ip4p_node   *top;
-  spinlock_t              lock;
+  ndpispinlock_t          lock;
   size_t                  len;
 };
 
 struct hash_ip4p_table {
   size_t                  size;
   int			  ipv6;
-  spinlock_t              lock;
-  atomic_t                count;
+  ndpispinlock_t              lock;
+  ndpiatomic_t                count;
   struct hash_ip4p        tbl;
 };
 
@@ -1007,8 +1015,6 @@
 #define NUM_CUSTOM_CATEGORIES      5
 #define CUSTOM_CATEGORY_LABEL_LEN 32
 
-#ifdef NDPI_LIB_COMPILATION
-
 /* Needed to have access to HAVE_* defines */
 #include "ndpi_config.h"
 
@@ -1146,8 +1152,6 @@
 #endif
 };
 
-#endif /* NDPI_LIB_COMPILATION */
-
 typedef enum {
    ndpi_cipher_safe = NDPI_CIPHER_SAFE,
    ndpi_cipher_weak = NDPI_CIPHER_WEAK,
